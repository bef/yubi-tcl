#summary About API users and keys

= KeyManagement =
For the time being there is only one data backend available for production use - the file backend.

== File backend ==
=== Users ===
Each external user/application combination is associated with one API user - e.g. user _foo_ at `example.com/blog` would have an API user entry and user _bar_ at `example.com/shop` would have another user entry.

API Users are referenced by a user ID, AES-API-Key and the validation server's URL. This information is stored on the application side - e.g. `example.com/blog` - for a specific user - e.g. `foo`.

The configuration resides under `data/users`.

Example `data/users/1`:
{{{
apikey = da5d1a9407db6df1b547c0daefb6298a
service_description = fnord secure email provider
force_hmac = 1

#comment

keyid = 510459
}}}

  * The attributes `apikey` and `keyid` are mandatory.
  * `apikey` is the hex encoded AES key
  * `keyid` is a reference to the associated yubikey configuration.
  * `service_description` is a descriptive reference to the associated service, but not processed any further.
  * Comments are prefixed by _#_.

=== Keys ===
Keys reside under `data/keys`.

Example `data/keys/510459`:
{{{
aeskey = a75bab9004c818850b0b549e32c4491c
private_identity = 000000000bef
active = 1
usertoken = foo@example.com
}}}

  * The attributes `aeskey` and `private_identity` are mandatory, `active` defaults to `1`. The `usertoken` is only a reference to the actual keyholder and not processed further.
  * `aeskey` and `private_identity` are hex encoded values.
  * Key ID is the filename.

=== Programming Keys ===
Example with [http://code.google.com/p/yubikey-personalization/ ykpers]:
{{{
ykpersonalize -1 -aa75bab9004c818850b0b549e32c4491c -osend-ref -ofixed=h:626566 -ouid=000000000bef
}}}
