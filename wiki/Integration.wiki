#summary How to use yubi-tcl with your setup, e.g. PAM

= Integration =
== Linux-PAM (yubico-pam) ==
  * Download and install [http://code.google.com/p/yubico-pam/ yubico-pam]
  * Create or use a Yubikey emitting 44 OTP characters (12 public identity + 32 encrypted OTP), e.g. `djiehevlhitindetjnfclldbdngihdketubiguvggfgj`
  * Extract your yubikey's token ID (first 12 characters of the OTP): `djiehevlhiti`
  * Create/Change your _authfile_ as described in [http://code.google.com/p/yubico-pam/wiki/YubikeyAndSSHViaPAM YubikeyAndSSHViaPAM];
  * If you are using a keyboard layout not covered by Yubico's modhex encoding, e.g. Dvorak, then you may like to add several token IDs for the same key to your _authfile_:
{{{
root:djiehevlhiti:ehc.d.kndcyc
}}}
  * Configure PAM, e.g. /etc/pam.d/sshd:
{{{
auth sufficient pam_yubico.so authfile=/etc/yubikeyid id=2 key=rj63rneL80QxG/nM6Ep7jQ== url=http://localhost:88/cgi-bin/yubiverify2.0.tcl?id=%d&otp=%s&v11compatible=1 debug
}}}
This example PAM configuration line grants access with yubikey authentication (one factor), if listed as first _auth_ line (see `man pam.d`, keyword `sufficient`).

Parameters include `id` and `key` for the validation API. Both can be printed out with the _yubi_key_mgmt_ tool:
{{{
$ ./tools/yubi_key_mgmt.tcl list user 2
====[ user 2 ]====
  apikey               ae3eb7ae778bf344311bf9cce84a7b8d
  service_description  devvm PAM
  force_hmac           1
  ## apikey (BASE64)   rj63rneL80QxG/nM6Ep7jQ==
}}}
The API URL must be compatible with [http://code.google.com/p/yubico-c-client ykclient], meaning
  # all query parameters must be sorted by key AND
  # v11compatible=1 turns on validation protocol version 1.1 compatibility mode.
`debug` is for debugging only and should be removed on production systems.

Additional parameters and documentation can be found on the [http://code.google.com/p/yubico-pam/wiki/ReadMe yubico-pam readme page].

== Linux-PAM (libpam-script) ==
  * follow instructions in "Linux-PAM (yubico-pam)", but install `libpam-script` instead, e.g. `apt-get install libpam-script`
  * Configure PAM, e.g. /etc/pam.d/sshd:
{{{
auth sufficient pam_script.so dir=/opt/yubi/examples
}}}
  * copy or link `ssh_force_cmd.tcl` to `pam_script_auth`:
{{{
cd /opt/yubi/examples
ln -s ssh_force_cmd.tcl pam_script_auth
}}}

== php-yubico ==
  * Download and unpack [http://code.google.com/p/php-yubico/ php-yubico]
  * take a look at this [https://code.google.com/p/yubi-tcl/source/browse/trunk/examples/php-yubico-example.php working code snippet]

== OpenSSH two-factor authentication ==
  * Set up ssh with public key authentication: [http://www.google.co.uk/search?q=howto+openssh+publickey HOWTO]
  * Set up sshd_config (usually `/etc/ssh/sshd_config`) - append the following lines or an equivalent at the end of your sshd_config:
{{{
	AcceptEnv SSH_AUTH_OTP
	Match User user,test Address 0.0.0.0/0,!172.16.0.0/16
	        #Banner /etc/otp_banner
	        PasswordAuthentication no
	        PubkeyAuthentication yes
	        ForceCommand /opt/yubi/examples/ssh_force_cmd.tcl ini=/opt/yubi/etc/authorized_yubi.ini
}}}
  The ForceCommand script verifies the correct input of an OTP token after successful public key authentication.
  * Configure validation server and allowed keys in `/opt/yubi/etc/authorized_yubi.ini`:
{{{
[global]
api_url = http://localhost:88/cgi-bin/yubiverify2.0.tcl
api_id = 1
api_key = 2l0alAfbbfG1R8Da77Ypig==

[user:user]
tokenids = djiehevlhiti djbvbvkgvfth djtvuvefnjth

[user:test]
tokenids = cccccccirnnn
api_url = http://api.yubico.com/wsapi/2.0/verify
api_id = 42
api_key = dGhpcyBpcyBhIHRlc3Q=
}}}
    User `user` has three yubikeys with private token IDs. User `test` will be validated against a different validation server.
  * Set up scp/sftp compatibility:
    The OTP token may be passed to the server side either interactively (stdin), or by sharing the environment valiable `SSH_AUTH_OTP`. This can be useful for `scp` or `sftp`. A simple replacement scp command could be
{{{
	alias scp-otp='echo -n "OTP: "; read SSH_AUTH_OTP; export SSH_AUTH_OTP; scp -oSendEnv=SSH_AUTH_OTP'
}}}

  * example SSH session with incorrect token:
{{{
$ ssh user@devvm
One-Time-Password: aoeu
permission denied.
Connection to devvm closed.
}}}
  * example SSH session with correct token:
{{{
$ ssh user@devvm
One-Time-Password: ehc.d.kndcycgniuunxcyyibjy.jkxubj.jtyjcpbypp
user@devvm:~$	
}}}
  * example SCP:
{{{
$ scp-otp /etc/hosts user@devvm:/tmp
OTP: ehc.d.kndcyciicjdddj.utdxeutchgubh.cgugipndj
hosts                                                                  100%  805     0.8KB/s   00:00    
Transferred: sent 3952, received 2552 bytes, in 0.9 seconds
Bytes per second: sent 4600.0, received 2970.5
}}}
